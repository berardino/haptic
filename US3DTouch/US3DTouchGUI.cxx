// generated by Fast Light User Interface Designer (fluid) version 1.0100

#include "US3DTouchGUI.h"

inline void US3DTouchGui::cb_Load_i(Fl_Button*, void*) {
  Load();
}
void US3DTouchGui::cb_Load(Fl_Button* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_Load_i(o,v);
}

inline void US3DTouchGui::cb_m_COpacity_i(Fl_Value_Slider*, void*) {
  SetOpacity();
}
void US3DTouchGui::cb_m_COpacity(Fl_Value_Slider* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_m_COpacity_i(o,v);
}

inline void US3DTouchGui::cb_m_CProxyRadius_i(Fl_Value_Slider*, void*) {
  SetProxyRadius();
}
void US3DTouchGui::cb_m_CProxyRadius(Fl_Value_Slider* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_m_CProxyRadius_i(o,v);
}

inline void US3DTouchGui::cb_m_COBBTreeView_i(Fl_Light_Button*, void*) {
  SetOBBTreeView();
}
void US3DTouchGui::cb_m_COBBTreeView(Fl_Light_Button* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_m_COBBTreeView_i(o,v);
}

inline void US3DTouchGui::cb_m_COBBTreeSurfaceType_i(Fl_Light_Button*, void*) {
  SetOBBTreeSurfaceType();
}
void US3DTouchGui::cb_m_COBBTreeSurfaceType(Fl_Light_Button* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_m_COBBTreeSurfaceType_i(o,v);
}

inline void US3DTouchGui::cb_m_COBBTreeOpacity_i(Fl_Value_Slider*, void*) {
  SetOBBTreeOpacity();
}
void US3DTouchGui::cb_m_COBBTreeOpacity(Fl_Value_Slider* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_m_COBBTreeOpacity_i(o,v);
}

inline void US3DTouchGui::cb_m_COBBTreeLevel_i(Fl_Value_Slider*, void*) {
  SetOBBTreeLevel();
}
void US3DTouchGui::cb_m_COBBTreeLevel(Fl_Value_Slider* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_m_COBBTreeLevel_i(o,v);
}

inline void US3DTouchGui::cb_m_CServoLoop_i(Fl_Light_Button*, void*) {
  SetServoLoop();
}
void US3DTouchGui::cb_m_CServoLoop(Fl_Light_Button* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_m_CServoLoop_i(o,v);
}

inline void US3DTouchGui::cb_m_CDamping_i(Fl_Value_Slider*, void*) {
  SetDamping();
}
void US3DTouchGui::cb_m_CDamping(Fl_Value_Slider* o, void* v) {
  ((US3DTouchGui*)(o->parent()->parent()->user_data()))->cb_m_CDamping_i(o,v);
}

inline void US3DTouchGui::cb_m_CElastic_i(Fl_Value_Slider*, void*) {
  SetElastic();
}
void US3DTouchGui::cb_m_CElastic(Fl_Value_Slider* o, void* v) {
  ((US3DTouchGui*)(o->parent()->user_data()))->cb_m_CElastic_i(o,v);
}

US3DTouchGui::US3DTouchGui() {
  Fl_Window* w;
  { Fl_Window* o = m_CWnd = new Fl_Window(1028, 717, "US3DTouch 1.0");
    w = o;
    o->color(206);
    o->labelsize(12);
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 638, 820, 77);
      o->box(FL_EMBOSSED_BOX);
      { Fl_Button* o = new Fl_Button(705, 661, 59, 20, "Load...");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->labelsize(13);
        o->callback((Fl_Callback*)cb_Load);
      }
      { Fl_Progress* o = m_CProgress = new Fl_Progress(705, 683, 105, 18);
        o->box(FL_PLASTIC_UP_BOX);
        o->selection_color(61);
        o->labelsize(12);
      }
      { Fl_Value_Slider* o = m_COpacity = new Fl_Value_Slider(50, 658, 130, 20, "Object opacity");
        o->type(5);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->selection_color(134);
        o->labelsize(12);
        o->value(1);
        o->callback((Fl_Callback*)cb_m_COpacity);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = m_CProxyRadius = new Fl_Value_Slider(180, 658, 130, 20, "Proxy radius");
        o->type(5);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->selection_color(134);
        o->labelsize(12);
        o->maximum(20);
        o->value(2);
        o->callback((Fl_Callback*)cb_m_CProxyRadius);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Light_Button* o = m_COBBTreeView = new Fl_Light_Button(320, 658, 80, 20, "OBB Tree");
        o->box(FL_PLASTIC_UP_BOX);
        o->value(1);
        o->selection_color(2);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_m_COBBTreeView);
      }
      { Fl_Output* o = m_CNCells = new Fl_Output(575, 660, 70, 15, "Number of triangle");
        o->box(FL_EMBOSSED_BOX);
        o->labelsize(11);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Light_Button* o = m_COBBTreeSurfaceType = new Fl_Light_Button(320, 680, 80, 20, "OBB S/W");
        o->box(FL_PLASTIC_UP_BOX);
        o->value(1);
        o->selection_color(2);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_m_COBBTreeSurfaceType);
      }
      { Fl_Value_Slider* o = m_COBBTreeOpacity = new Fl_Value_Slider(408, 655, 130, 20, "OBB Tree  opacity");
        o->type(5);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->selection_color(134);
        o->labelsize(10);
        o->value(0.1);
        o->callback((Fl_Callback*)cb_m_COBBTreeOpacity);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = m_COBBTreeLevel = new Fl_Value_Slider(410, 690, 130, 20, "OBB Tree  level");
        o->type(5);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->selection_color(134);
        o->labelsize(10);
        o->maximum(9);
        o->step(1);
        o->callback((Fl_Callback*)cb_m_COBBTreeLevel);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    { vtkFlRender* o = m_CRender = new vtkFlRender(0, 2, 817, 634);
      o->box(FL_FLAT_BOX);
      o->color(22);
      o->end();
    }
    { Fl_Group* o = m_CHapticTab = new Fl_Group(820, 1, 205, 714);
      o->box(FL_EMBOSSED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(15);
      o->align(FL_ALIGN_CENTER);
      { Fl_Group* o = new Fl_Group(829, 154, 190, 45, "Proxy");
        o->box(FL_EMBOSSED_BOX);
        o->color(89);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelfont(4);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Output* o = m_CPhantomProxy_X = new Fl_Output(839, 174, 55, 15, "X");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomProxy_Y = new Fl_Output(899, 174, 55, 15, "Y");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomProxy_Z = new Fl_Output(959, 174, 55, 15, "Z");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(829, 89, 190, 45, "SCP");
        o->box(FL_EMBOSSED_BOX);
        o->color(61);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelfont(4);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Output* o = m_CPhantomSCP_X = new Fl_Output(839, 109, 51, 15, "X");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomSCP_Y = new Fl_Output(899, 109, 55, 15, "Y");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomSCP_Z = new Fl_Output(959, 109, 55, 15, "Z");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        o->end();
      }
      { Fl_Light_Button* o = m_CServoLoop = new Fl_Light_Button(905, 445, 112, 30, "Start servo loop");
        o->box(FL_PLASTIC_UP_BOX);
        o->selection_color(2);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_m_CServoLoop);
        o->when(FL_WHEN_CHANGED);
      }
      { Fl_Group* o = new Fl_Group(829, 25, 190, 45, "Orientation");
        o->box(FL_EMBOSSED_BOX);
        o->color(19);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Output* o = m_CPhantomAngle_X = new Fl_Output(839, 44, 51, 15, "X");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomAngle_Y = new Fl_Output(899, 44, 51, 15, "Y");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomAngle_Z = new Fl_Output(959, 44, 51, 15, "Z");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Output* o = m_CInOut = new Fl_Output(830, 447, 70, 25);
        o->box(FL_EMBOSSED_BOX);
        o->color(95);
        o->labelsize(10);
        o->textsize(13);
        o->textcolor(88);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Output* o = m_CUpdateRate = new Fl_Output(830, 500, 188, 30, "Average update rate");
        o->box(FL_EMBOSSED_BOX);
        o->color(221);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelfont(4);
        o->labelsize(13);
        o->textsize(27);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Group* o = new Fl_Group(830, 225, 190, 45, "Velocity [mm/sec]");
        o->box(FL_EMBOSSED_BOX);
        o->color(252);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelfont(4);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Output* o = m_CPhantomVelocity_X = new Fl_Output(840, 245, 55, 15, "Vx");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomVelocity_Y = new Fl_Output(900, 245, 55, 15, "Vy");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomVelocity_Z = new Fl_Output(960, 245, 55, 15, "Vz");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(830, 295, 190, 45, "Force [N]");
        o->box(FL_EMBOSSED_BOX);
        o->color(174);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelfont(4);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Output* o = m_CPhantomForce_X = new Fl_Output(840, 315, 55, 15, "Fx");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomForce_Y = new Fl_Output(900, 315, 55, 15, "Fy");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomForce_Z = new Fl_Output(960, 315, 55, 15, "Fz");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(830, 360, 190, 45);
        o->box(FL_EMBOSSED_BOX);
        o->color(95);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelfont(4);
        o->align(FL_ALIGN_TOP_LEFT);
        { Fl_Output* o = m_CPhantomDelta = new Fl_Output(840, 380, 55, 15, "Delta [mm]");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CPhantomForceSize = new Fl_Output(900, 380, 55, 15, "|F| [N]");
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = new Fl_Output(960, 380, 55, 15);
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        o->end();
      }
      { Fl_Value_Slider* o = m_CDamping = new Fl_Value_Slider(835, 555, 135, 25, "Damping factor");
        o->type(5);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->selection_color(134);
        o->labelsize(10);
        o->maximum(3);
        o->value(2);
        o->callback((Fl_Callback*)cb_m_CDamping);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Value_Slider* o = m_CElastic = new Fl_Value_Slider(835, 595, 135, 25, "Elastic factor");
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->selection_color(134);
      o->labelsize(10);
      o->maximum(3000);
      o->step(1);
      o->value(500);
      o->callback((Fl_Callback*)cb_m_CElastic);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    o->end();
  }
}

void US3DTouchGui::Load() {
}

void US3DTouchGui::SetServoLoop() {
}

void US3DTouchGui::SetOpacity() {
}

void US3DTouchGui::SetProxyRadius() {
}

void US3DTouchGui::SetOBBTreeView() {
}

void US3DTouchGui::SetOBBTreeSurfaceType() {
}

void US3DTouchGui::SetOBBTreeOpacity() {
}

void US3DTouchGui::SetOBBTreeLevel() {
}

void US3DTouchGui::SetDamping() {
}

void US3DTouchGui::SetElastic() {
}
