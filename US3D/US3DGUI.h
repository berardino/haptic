// generated by Fast Light User Interface Designer (fluid) version 1.0100

#ifndef US3DGUI_h
#define US3DGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Slider.H>
#include "vtkFlRayCastingRenderWindowInteractor.h"
#include <FL/Fl_Progress.H>
#include <FL/Fl_Value_Slider.H>
#include "vtkFlRender.h"
#include <FL/Fl_Pack.H>
#include <FL/Fl_Light_Button.H>
#include "vtkFL3ViewRenderWindowInteractor.h"
#include "vtkFlImageRenderWindowInteractor.h"
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Roller.H>

class US3DGui {
public:
  US3DGui();
  Fl_Window *m_CWnd;
  Fl_Output *m_CVoxelWidthText;
  Fl_Output *m_CVoxelHeightText;
  Fl_Output *m_CVoxelDepthText;
  Fl_Output *m_CVolumeWidthText;
  Fl_Output *m_CVolumeHeightText;
  Fl_Output *m_CVolumeDepthText;
  Fl_Output *m_CVOIWidthText;
  Fl_Output *m_CVOIHeightText;
  Fl_Output *m_CVOIDepthText;
  Fl_Output *m_CVolumeMeasure;
  Fl_Output *m_CVolumeVOIMeasure;
  Fl_Button *m_CLoad;
private:
  inline void cb_m_CLoad_i(Fl_Button*, void*);
  static void cb_m_CLoad(Fl_Button*, void*);
public:
  Fl_Slider *m_CBrightness;
private:
  inline void cb_m_CBrightness_i(Fl_Slider*, void*);
  static void cb_m_CBrightness(Fl_Slider*, void*);
public:
  vtkFlRayCastingRenderWindowInteractor *m_CRay;
  Fl_Progress *m_Progress;
  Fl_Value_Slider *m_CVolumeResolution;
private:
  inline void cb_m_CVolumeResolution_i(Fl_Value_Slider*, void*);
  static void cb_m_CVolumeResolution(Fl_Value_Slider*, void*);
public:
  Fl_Button *m_CVolumeRender;
private:
  inline void cb_m_CVolumeRender_i(Fl_Button*, void*);
  static void cb_m_CVolumeRender(Fl_Button*, void*);
public:
  Fl_Group *m_C3DTab;
  Fl_Progress *m_CProgressRender;
  Fl_Value_Slider *m_CSmoothing;
private:
  inline void cb_m_CSmoothing_i(Fl_Value_Slider*, void*);
  static void cb_m_CSmoothing(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CDecimate;
private:
  inline void cb_m_CDecimate_i(Fl_Value_Slider*, void*);
  static void cb_m_CDecimate(Fl_Value_Slider*, void*);
public:
  Fl_Button *m_CSaveVRML;
private:
  inline void cb_m_CSaveVRML_i(Fl_Button*, void*);
  static void cb_m_CSaveVRML(Fl_Button*, void*);
public:
  Fl_Button *m_CRenderRender;
private:
  inline void cb_m_CRenderRender_i(Fl_Button*, void*);
  static void cb_m_CRenderRender(Fl_Button*, void*);
public:
  Fl_Value_Slider *m_COpacity;
private:
  inline void cb_m_COpacity_i(Fl_Value_Slider*, void*);
  static void cb_m_COpacity(Fl_Value_Slider*, void*);
public:
  Fl_Group *m_3D;
  vtkFlRender *m_CRender;
  Fl_Button *m_Flat;
private:
  inline void cb_m_Flat_i(Fl_Button*, void*);
  static void cb_m_Flat(Fl_Button*, void*);
public:
  Fl_Button *m_Gouraund;
private:
  inline void cb_m_Gouraund_i(Fl_Button*, void*);
  static void cb_m_Gouraund(Fl_Button*, void*);
public:
  Fl_Light_Button *m_Wireframe;
private:
  inline void cb_m_Wireframe_i(Fl_Light_Button*, void*);
  static void cb_m_Wireframe(Fl_Light_Button*, void*);
public:
  Fl_Value_Slider *m_FeatureAngle;
private:
  inline void cb_m_FeatureAngle_i(Fl_Value_Slider*, void*);
  static void cb_m_FeatureAngle(Fl_Value_Slider*, void*);
public:
  Fl_Output *m_CSurfaceNVertexText;
  Fl_Output *m_CSurfaceNPolygonText;
  Fl_Button *m_CSaveVTK;
private:
  inline void cb_m_CSaveVTK_i(Fl_Button*, void*);
  static void cb_m_CSaveVTK(Fl_Button*, void*);
public:
  Fl_Tabs *m_CImagesTab;
  Fl_Value_Slider *m_CHeight;
private:
  inline void cb_m_CHeight_i(Fl_Value_Slider*, void*);
  static void cb_m_CHeight(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CWidth;
private:
  inline void cb_m_CWidth_i(Fl_Value_Slider*, void*);
  static void cb_m_CWidth(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CDepth;
private:
  inline void cb_m_CDepth_i(Fl_Value_Slider*, void*);
  static void cb_m_CDepth(Fl_Value_Slider*, void*);
public:
  vtkFL3ViewRenderWindowInteractor *m_C3ViewRender;
  vtkFlImageRenderWindowInteractor *m_CDataFilteredSaggittal;
  vtkFlImageRenderWindowInteractor *m_CDataFilteredAxial;
  vtkFlImageRenderWindowInteractor *m_CDataFilteredCoronal;
  Fl_Check_Button *m_CMoveSlice;
  Fl_Value_Slider *m_CSDeviationY;
private:
  inline void cb_m_CSDeviationY_i(Fl_Value_Slider*, void*);
  static void cb_m_CSDeviationY(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CSDeviationZ;
private:
  inline void cb_m_CSDeviationZ_i(Fl_Value_Slider*, void*);
  static void cb_m_CSDeviationZ(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CSDeviationX;
private:
  inline void cb_m_CSDeviationX_i(Fl_Value_Slider*, void*);
  static void cb_m_CSDeviationX(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CRadiusY;
private:
  inline void cb_m_CRadiusY_i(Fl_Value_Slider*, void*);
  static void cb_m_CRadiusY(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CRadiusX;
private:
  inline void cb_m_CRadiusX_i(Fl_Value_Slider*, void*);
  static void cb_m_CRadiusX(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CRadiusZ;
private:
  inline void cb_m_CRadiusZ_i(Fl_Value_Slider*, void*);
  static void cb_m_CRadiusZ(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *m_CStandardDeviationLock;
  Fl_Check_Button *m_CRadiusLock;
  Fl_Output *m_CPosX;
  Fl_Output *m_CPosY;
  Fl_Roller *m_CDepthUp;
private:
  inline void cb_m_CDepthUp_i(Fl_Roller*, void*);
  static void cb_m_CDepthUp(Fl_Roller*, void*);
public:
  Fl_Roller *m_CDepthDown;
private:
  inline void cb_m_CDepthDown_i(Fl_Roller*, void*);
  static void cb_m_CDepthDown(Fl_Roller*, void*);
  inline void cb_Extract_i(Fl_Button*, void*);
  static void cb_Extract(Fl_Button*, void*);
public:
  vtkFlImageRenderWindowInteractor *m_CDataSegmentedSaggittal;
  vtkFlImageRenderWindowInteractor *m_CDataSegmentedAxial;
  vtkFlImageRenderWindowInteractor *m_CDataSegmentedCoronal;
  Fl_Value_Slider *m_CSWidth;
private:
  inline void cb_m_CSWidth_i(Fl_Value_Slider*, void*);
  static void cb_m_CSWidth(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CSDepth;
private:
  inline void cb_m_CSDepth_i(Fl_Value_Slider*, void*);
  static void cb_m_CSDepth(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CSHeight;
private:
  inline void cb_m_CSHeight_i(Fl_Value_Slider*, void*);
  static void cb_m_CSHeight(Fl_Value_Slider*, void*);
public:
  vtkFL3ViewRenderWindowInteractor *m_C3VOIViewRender;
  Fl_Output *m_CSPosX;
  Fl_Output *m_CSPosY;
  Fl_Check_Button *m_CMoveVOISlice;
  Fl_Value_Slider *m_CThreshInf;
private:
  inline void cb_m_CThreshInf_i(Fl_Value_Slider*, void*);
  static void cb_m_CThreshInf(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CThreshSup;
private:
  inline void cb_m_CThreshSup_i(Fl_Value_Slider*, void*);
  static void cb_m_CThreshSup(Fl_Value_Slider*, void*);
public:
  virtual void Load();
  virtual void SaveVRML();
  virtual void SetBrightness();
  virtual void SetSmoothing();
  virtual void SetDecimate();
  virtual void SurfaceRender();
  virtual void RayRender();
  virtual void SetOpacity();
  virtual void SetControlRay();
  virtual void SetControlRender();
  virtual void SetFilteredSliceDepth();
  virtual void SetFilteredSliceWidth();
  virtual void SetFilteredSliceHeight();
  virtual void SetRadius(float value);
  virtual void SetStandardDeviation(float value);
  virtual void SetVOIDepthUp();
  virtual void SetVOIDepthDown();
  virtual void ExtractVOI();
  virtual void SetSegmentedSliceWidth();
  virtual void SetSegmentedSliceDepth();
  virtual void SetSegmentedSliceHeight();
  virtual void SetThresholding();
  virtual void Ruota();
  virtual void SetShadingInterpolationMethod();
  virtual void SetFeatureAngle();
  virtual void SetVolumeResolution();
  virtual void VolumeRender();
  virtual void SaveVTK();
};
#endif
