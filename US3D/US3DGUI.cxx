// generated by Fast Light User Interface Designer (fluid) version 1.0100

#include "US3DGUI.h"

inline void US3DGui::cb_m_CLoad_i(Fl_Button*, void*) {
  Load();
}
void US3DGui::cb_m_CLoad(Fl_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CLoad_i(o,v);
}

inline void US3DGui::cb_m_CBrightness_i(Fl_Slider*, void*) {
  SetBrightness();
}
void US3DGui::cb_m_CBrightness(Fl_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CBrightness_i(o,v);
}

inline void US3DGui::cb_m_CVolumeResolution_i(Fl_Value_Slider*, void*) {
  SetVolumeResolution();
}
void US3DGui::cb_m_CVolumeResolution(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CVolumeResolution_i(o,v);
}

inline void US3DGui::cb_m_CVolumeRender_i(Fl_Button*, void*) {
  VolumeRender();
}
void US3DGui::cb_m_CVolumeRender(Fl_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CVolumeRender_i(o,v);
}

inline void US3DGui::cb_m_CSmoothing_i(Fl_Value_Slider*, void*) {
  SetSmoothing();
}
void US3DGui::cb_m_CSmoothing(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CSmoothing_i(o,v);
}

inline void US3DGui::cb_m_CDecimate_i(Fl_Value_Slider*, void*) {
  SetDecimate();
}
void US3DGui::cb_m_CDecimate(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CDecimate_i(o,v);
}

inline void US3DGui::cb_m_CSaveVRML_i(Fl_Button*, void*) {
  SaveVRML();
}
void US3DGui::cb_m_CSaveVRML(Fl_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CSaveVRML_i(o,v);
}

inline void US3DGui::cb_m_CRenderRender_i(Fl_Button*, void*) {
  SurfaceRender();
}
void US3DGui::cb_m_CRenderRender(Fl_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CRenderRender_i(o,v);
}

inline void US3DGui::cb_m_COpacity_i(Fl_Value_Slider*, void*) {
  SetOpacity();
}
void US3DGui::cb_m_COpacity(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_COpacity_i(o,v);
}

inline void US3DGui::cb_m_Flat_i(Fl_Button*, void*) {
  SetShadingInterpolationMethod();
}
void US3DGui::cb_m_Flat(Fl_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_Flat_i(o,v);
}

inline void US3DGui::cb_m_Gouraund_i(Fl_Button*, void*) {
  SetShadingInterpolationMethod();
}
void US3DGui::cb_m_Gouraund(Fl_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_Gouraund_i(o,v);
}

inline void US3DGui::cb_m_Wireframe_i(Fl_Light_Button*, void*) {
  SetShadingInterpolationMethod();
}
void US3DGui::cb_m_Wireframe(Fl_Light_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_Wireframe_i(o,v);
}

inline void US3DGui::cb_m_FeatureAngle_i(Fl_Value_Slider*, void*) {
  SetFeatureAngle();
}
void US3DGui::cb_m_FeatureAngle(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_FeatureAngle_i(o,v);
}

inline void US3DGui::cb_m_CSaveVTK_i(Fl_Button*, void*) {
  SaveVTK();
}
void US3DGui::cb_m_CSaveVTK(Fl_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CSaveVTK_i(o,v);
}

inline void US3DGui::cb_m_CHeight_i(Fl_Value_Slider*, void*) {
  SetFilteredSliceHeight();
}
void US3DGui::cb_m_CHeight(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CHeight_i(o,v);
}

inline void US3DGui::cb_m_CWidth_i(Fl_Value_Slider*, void*) {
  SetFilteredSliceWidth();
}
void US3DGui::cb_m_CWidth(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CWidth_i(o,v);
}

inline void US3DGui::cb_m_CDepth_i(Fl_Value_Slider*, void*) {
  SetFilteredSliceDepth();
}
void US3DGui::cb_m_CDepth(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CDepth_i(o,v);
}

inline void US3DGui::cb_m_CSDeviationY_i(Fl_Value_Slider* o, void*) {
  SetStandardDeviation(o->value());
}
void US3DGui::cb_m_CSDeviationY(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CSDeviationY_i(o,v);
}

inline void US3DGui::cb_m_CSDeviationZ_i(Fl_Value_Slider* o, void*) {
  SetStandardDeviation(o->value());
}
void US3DGui::cb_m_CSDeviationZ(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CSDeviationZ_i(o,v);
}

inline void US3DGui::cb_m_CSDeviationX_i(Fl_Value_Slider* o, void*) {
  SetStandardDeviation(o->value());
}
void US3DGui::cb_m_CSDeviationX(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CSDeviationX_i(o,v);
}

inline void US3DGui::cb_m_CRadiusY_i(Fl_Value_Slider* o, void*) {
  SetRadius(o->value());
}
void US3DGui::cb_m_CRadiusY(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CRadiusY_i(o,v);
}

inline void US3DGui::cb_m_CRadiusX_i(Fl_Value_Slider* o, void*) {
  SetRadius(o->value());
}
void US3DGui::cb_m_CRadiusX(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CRadiusX_i(o,v);
}

inline void US3DGui::cb_m_CRadiusZ_i(Fl_Value_Slider* o, void*) {
  SetRadius(o->value());
}
void US3DGui::cb_m_CRadiusZ(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CRadiusZ_i(o,v);
}

inline void US3DGui::cb_m_CDepthUp_i(Fl_Roller*, void*) {
  SetVOIDepthUp();
}
void US3DGui::cb_m_CDepthUp(Fl_Roller* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CDepthUp_i(o,v);
}

inline void US3DGui::cb_m_CDepthDown_i(Fl_Roller*, void*) {
  SetVOIDepthDown();
}
void US3DGui::cb_m_CDepthDown(Fl_Roller* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CDepthDown_i(o,v);
}

inline void US3DGui::cb_Extract_i(Fl_Button*, void*) {
  ExtractVOI();
}
void US3DGui::cb_Extract(Fl_Button* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_Extract_i(o,v);
}

inline void US3DGui::cb_m_CSWidth_i(Fl_Value_Slider*, void*) {
  SetSegmentedSliceWidth();
}
void US3DGui::cb_m_CSWidth(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CSWidth_i(o,v);
}

inline void US3DGui::cb_m_CSDepth_i(Fl_Value_Slider*, void*) {
  SetSegmentedSliceDepth();
}
void US3DGui::cb_m_CSDepth(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CSDepth_i(o,v);
}

inline void US3DGui::cb_m_CSHeight_i(Fl_Value_Slider*, void*) {
  SetSegmentedSliceHeight();
}
void US3DGui::cb_m_CSHeight(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->user_data()))->cb_m_CSHeight_i(o,v);
}

inline void US3DGui::cb_m_CThreshInf_i(Fl_Value_Slider*, void*) {
  SetThresholding();
}
void US3DGui::cb_m_CThreshInf(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CThreshInf_i(o,v);
}

inline void US3DGui::cb_m_CThreshSup_i(Fl_Value_Slider*, void*) {
  SetThresholding();
}
void US3DGui::cb_m_CThreshSup(Fl_Value_Slider* o, void* v) {
  ((US3DGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_CThreshSup_i(o,v);
}

US3DGui::US3DGui() {
  Fl_Window* w;
  { Fl_Window* o = m_CWnd = new Fl_Window(1024, 721, "US3D 1.3");
    w = o;
    o->color(206);
    o->labelsize(12);
    o->user_data((void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(590, 0, 460, 755);
      o->labelsize(11);
      { Fl_Group* o = new Fl_Group(590, 15, 435, 705, "Ultrasound volume");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(10);
        { Fl_Group* o = new Fl_Group(595, 450, 425, 260);
          o->box(FL_PLASTIC_UP_BOX);
          o->color(254);
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Group* o = new Fl_Group(610, 475, 61, 90, "Voxel");
            o->box(FL_PLASTIC_DOWN_FRAME);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(10);
            o->align(FL_ALIGN_TOP_LEFT);
            { Fl_Output* o = m_CVoxelWidthText = new Fl_Output(615, 490, 50, 15, "Width");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Output* o = m_CVoxelHeightText = new Fl_Output(615, 518, 50, 15, "Height");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Output* o = m_CVoxelDepthText = new Fl_Output(616, 544, 50, 15, "Depth");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(680, 475, 60, 90, "Volume");
            o->box(FL_PLASTIC_DOWN_FRAME);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(10);
            o->align(FL_ALIGN_TOP_LEFT);
            { Fl_Output* o = m_CVolumeWidthText = new Fl_Output(685, 490, 50, 15, "Width");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Output* o = m_CVolumeHeightText = new Fl_Output(684, 517, 50, 15, "Height");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Output* o = m_CVolumeDepthText = new Fl_Output(685, 544, 50, 15, "Depth");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(750, 475, 60, 90, "V.O.I");
            o->box(FL_PLASTIC_DOWN_FRAME);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(10);
            o->align(FL_ALIGN_TOP_LEFT);
            { Fl_Output* o = m_CVOIWidthText = new Fl_Output(755, 490, 50, 15, "Width");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Output* o = m_CVOIHeightText = new Fl_Output(754, 517, 51, 15, "Height");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Output* o = m_CVOIDepthText = new Fl_Output(755, 544, 50, 15, "Depth");
              o->box(FL_NO_BOX);
              o->color(134);
              o->labelsize(10);
              o->textsize(10);
              o->textcolor(216);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            o->end();
          }
          { Fl_Output* o = m_CVolumeMeasure = new Fl_Output(610, 585, 80, 15, "Volume measure");
            o->box(FL_NO_BOX);
            o->color(134);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(10);
            o->textsize(10);
            o->textcolor(216);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Output* o = m_CVolumeVOIMeasure = new Fl_Output(610, 620, 80, 15, "V.O.I measure");
            o->box(FL_NO_BOX);
            o->color(134);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(10);
            o->textsize(10);
            o->textcolor(216);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Button* o = m_CLoad = new Fl_Button(745, 668, 65, 25, "Load...");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->labelsize(11);
            o->callback((Fl_Callback*)cb_m_CLoad);
          }
          { Fl_Slider* o = m_CBrightness = new Fl_Slider(610, 670, 120, 20, "Brightness");
            o->type(5);
            o->box(FL_PLASTIC_DOWN_BOX);
            o->color(254);
            o->selection_color(237);
            o->labelsize(10);
            o->minimum(256);
            o->maximum(0);
            o->step(1);
            o->value(128);
            o->callback((Fl_Callback*)cb_m_CBrightness);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(595, 26, 425, 354);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFlRayCastingRenderWindowInteractor* o = m_CRay = new vtkFlRayCastingRenderWindowInteractor(595, 26, 425, 354);
            o->box(FL_FLAT_BOX);
            o->color(22);
            o->end();
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Progress* o = m_Progress = new Fl_Progress(595, 430, 425, 20);
          o->box(FL_PLASTIC_UP_BOX);
          o->selection_color(61);
          o->labelsize(12);
          o->align(FL_ALIGN_CENTER);
        }
        { Fl_Value_Slider* o = m_CVolumeResolution = new Fl_Value_Slider(890, 380, 130, 20, "Resolution");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->labelsize(10);
          o->minimum(1);
          o->maximum(50);
          o->step(1);
          o->value(5);
          o->callback((Fl_Callback*)cb_m_CVolumeResolution);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_RELEASE);
          o->deactivate();
        }
        { Fl_Button* o = m_CVolumeRender = new Fl_Button(595, 380, 65, 20, "Render");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_m_CVolumeRender);
          o->deactivate();
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Group* o = m_C3DTab = new Fl_Group(590, 15, 455, 740, "3D");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(10);
        o->hide();
        o->deactivate();
        { Fl_Progress* o = m_CProgressRender = new Fl_Progress(820, 576, 203, 19);
          o->box(FL_PLASTIC_UP_BOX);
          o->selection_color(61);
          o->labelsize(12);
        }
        { Fl_Value_Slider* o = m_CSmoothing = new Fl_Value_Slider(670, 621, 95, 20, "Smoothing");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(237);
          o->labelsize(10);
          o->step(0.05);
          o->value(0.5);
          o->callback((Fl_Callback*)cb_m_CSmoothing);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = m_CDecimate = new Fl_Value_Slider(670, 655, 95, 20, "Decimate");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(237);
          o->labelsize(10);
          o->value(0.5);
          o->callback((Fl_Callback*)cb_m_CDecimate);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Button* o = m_CSaveVRML = new Fl_Button(945, 690, 71, 25, "Export VRML");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_m_CSaveVRML);
          o->deactivate();
        }
        { Fl_Button* o = m_CRenderRender = new Fl_Button(595, 575, 65, 20, "Render");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_m_CRenderRender);
        }
        { Fl_Value_Slider* o = m_COpacity = new Fl_Value_Slider(765, 620, 95, 20, "Opacity");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(237);
          o->labelsize(10);
          o->value(1);
          o->callback((Fl_Callback*)cb_m_COpacity);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE);
        }
        { Fl_Group* o = new Fl_Group(595, 20, 425, 555);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { Fl_Group* o = m_3D = new Fl_Group(595, 20, 424, 555);
            o->color(22);
            { vtkFlRender* o = m_CRender = new vtkFlRender(595, 20, 424, 555);
              o->color(22);
              o->end();
              Fl_Group::current()->resizable(o);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Pack* o = new Fl_Pack(595, 620, 60, 60, "Rendering");
          o->box(FL_PLASTIC_DOWN_FRAME);
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Button* o = m_Flat = new Fl_Button(595, 620, 60, 20, "Flat");
            o->type(102);
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->labelsize(10);
            o->callback((Fl_Callback*)cb_m_Flat);
          }
          { Fl_Button* o = m_Gouraund = new Fl_Button(595, 640, 60, 20, "Gouraund");
            o->type(102);
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->value(1);
            o->labelsize(10);
            o->callback((Fl_Callback*)cb_m_Gouraund);
          }
          { Fl_Light_Button* o = m_Wireframe = new Fl_Light_Button(595, 660, 60, 20, "S/W");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->selection_color(216);
            o->labelsize(10);
            o->callback((Fl_Callback*)cb_m_Wireframe);
          }
          o->end();
        }
        { Fl_Value_Slider* o = m_FeatureAngle = new Fl_Value_Slider(765, 655, 95, 20, "Feature angle");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(237);
          o->labelsize(10);
          o->maximum(180);
          o->step(1);
          o->value(45);
          o->callback((Fl_Callback*)cb_m_FeatureAngle);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = m_CSurfaceNVertexText = new Fl_Output(710, 685, 55, 15, "n\260 Vertex");
          o->box(FL_PLASTIC_UP_BOX);
          o->color(134);
          o->labelsize(9);
          o->textsize(10);
          o->textcolor(216);
        }
        { Fl_Output* o = m_CSurfaceNPolygonText = new Fl_Output(710, 700, 55, 15, "n\260 Polygon");
          o->box(FL_PLASTIC_UP_BOX);
          o->color(134);
          o->labelsize(9);
          o->textsize(10);
          o->textcolor(216);
        }
        { Fl_Button* o = m_CSaveVTK = new Fl_Button(945, 665, 71, 25, "Save 3D");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_m_CSaveVTK);
          o->deactivate();
        }
        o->end();
      }
      o->end();
    }
    { Fl_Tabs* o = m_CImagesTab = new Fl_Tabs(0, 0, 590, 725);
      o->deactivate();
      { Fl_Group* o = new Fl_Group(0, 15, 590, 705, "Filtered");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(10);
        { Fl_Value_Slider* o = m_CHeight = new Fl_Value_Slider(320, 565, 250, 20, "Coronal");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(95);
          o->labelsize(10);
          o->step(1);
          o->callback((Fl_Callback*)cb_m_CHeight);
          o->align(FL_ALIGN_BOTTOM_LEFT);
        }
        { Fl_Value_Slider* o = m_CWidth = new Fl_Value_Slider(25, 275, 250, 20, "Sagittal");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(80);
          o->labelsize(10);
          o->step(1);
          o->callback((Fl_Callback*)cb_m_CWidth);
          o->align(FL_ALIGN_BOTTOM_LEFT);
        }
        { Fl_Value_Slider* o = m_CDepth = new Fl_Value_Slider(320, 275, 250, 20, "Axial");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(60);
          o->labelsize(10);
          o->step(1);
          o->callback((Fl_Callback*)cb_m_CDepth);
          o->align(FL_ALIGN_BOTTOM_LEFT);
        }
        { Fl_Group* o = new Fl_Group(5, 315, 290, 250);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFL3ViewRenderWindowInteractor* o = m_C3ViewRender = new vtkFL3ViewRenderWindowInteractor(5, 315, 290, 250);
            o->end();
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(25, 25, 250, 250);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFlImageRenderWindowInteractor* o = m_CDataFilteredSaggittal = new vtkFlImageRenderWindowInteractor(25, 25, 250, 250);
            o->end();
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(320, 25, 250, 250);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFlImageRenderWindowInteractor* o = m_CDataFilteredAxial = new vtkFlImageRenderWindowInteractor(320, 25, 250, 250);
            o->end();
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(320, 315, 250, 250);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFlImageRenderWindowInteractor* o = m_CDataFilteredCoronal = new vtkFlImageRenderWindowInteractor(320, 315, 250, 250);
            o->box(FL_FLAT_BOX);
            o->color(22);
            o->end();
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Check_Button* o = m_CMoveSlice = new Fl_Check_Button(5, 570, 80, 20, "Move slice");
          o->box(FL_FLAT_BOX);
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->labelsize(11);
        }
        { Fl_Group* o = new Fl_Group(235, 615, 170, 95, "Standard deviations");
          o->box(FL_PLASTIC_UP_BOX);
          o->color(254);
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Value_Slider* o = m_CSDeviationY = new Fl_Value_Slider(250, 645, 145, 15, "y");
            o->type(5);
            o->box(FL_FLAT_BOX);
            o->maximum(20);
            o->step(0.1);
            o->value(3.5);
            o->callback((Fl_Callback*)cb_m_CSDeviationY);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Value_Slider* o = m_CSDeviationZ = new Fl_Value_Slider(250, 665, 145, 15, "z");
            o->type(5);
            o->box(FL_FLAT_BOX);
            o->maximum(20);
            o->step(0.1);
            o->value(3.5);
            o->callback((Fl_Callback*)cb_m_CSDeviationZ);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Value_Slider* o = m_CSDeviationX = new Fl_Value_Slider(250, 625, 145, 15, "x");
            o->type(5);
            o->box(FL_FLAT_BOX);
            o->maximum(20);
            o->step(0.1);
            o->value(3.5);
            o->callback((Fl_Callback*)cb_m_CSDeviationX);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(420, 615, 150, 95, "Radius");
          o->box(FL_PLASTIC_UP_BOX);
          o->color(254);
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Value_Slider* o = m_CRadiusY = new Fl_Value_Slider(435, 645, 125, 15, "y");
            o->type(5);
            o->box(FL_FLAT_BOX);
            o->maximum(10);
            o->step(0.1);
            o->value(0.8);
            o->callback((Fl_Callback*)cb_m_CRadiusY);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Value_Slider* o = m_CRadiusX = new Fl_Value_Slider(435, 625, 125, 15, "x");
            o->type(5);
            o->box(FL_FLAT_BOX);
            o->maximum(10);
            o->step(0.1);
            o->value(0.8);
            o->callback((Fl_Callback*)cb_m_CRadiusX);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Value_Slider* o = m_CRadiusZ = new Fl_Value_Slider(435, 665, 125, 15, "z");
            o->type(5);
            o->box(FL_FLAT_BOX);
            o->maximum(10);
            o->step(0.1);
            o->value(0.8);
            o->callback((Fl_Callback*)cb_m_CRadiusZ);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
          }
          o->end();
        }
        { Fl_Check_Button* o = m_CStandardDeviationLock = new Fl_Check_Button(250, 685, 80, 15, "Lock");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->color(254);
          o->labelsize(11);
        }
        { Fl_Check_Button* o = m_CRadiusLock = new Fl_Check_Button(435, 685, 80, 15, "Lock");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->color(254);
          o->labelsize(11);
        }
        { Fl_Output* o = m_CPosX = new Fl_Output(97, 572, 40, 15, "x");
          o->labelsize(10);
          o->textsize(10);
        }
        { Fl_Output* o = m_CPosY = new Fl_Output(155, 572, 40, 15, "y");
          o->labelsize(10);
          o->textsize(10);
        }
        { Fl_Roller* o = m_CDepthUp = new Fl_Roller(570, 495, 15, 70);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->maximum(100);
          o->step(1);
          o->callback((Fl_Callback*)cb_m_CDepthUp);
        }
        { Fl_Roller* o = m_CDepthDown = new Fl_Roller(305, 495, 15, 70);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->maximum(100);
          o->step(1);
          o->callback((Fl_Callback*)cb_m_CDepthDown);
        }
        { Fl_Button* o = new Fl_Button(220, 570, 75, 20, "Extract VOI");
          o->box(FL_PLASTIC_UP_BOX);
          o->labelsize(11);
          o->callback((Fl_Callback*)cb_Extract);
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Group* o = new Fl_Group(0, 15, 590, 710, "Segmented");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(10);
        o->hide();
        { Fl_Group* o = new Fl_Group(25, 25, 250, 250);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFlImageRenderWindowInteractor* o = m_CDataSegmentedSaggittal = new vtkFlImageRenderWindowInteractor(25, 25, 250, 250);
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(320, 25, 250, 250);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFlImageRenderWindowInteractor* o = m_CDataSegmentedAxial = new vtkFlImageRenderWindowInteractor(320, 25, 250, 250);
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(320, 315, 250, 250);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFlImageRenderWindowInteractor* o = m_CDataSegmentedCoronal = new vtkFlImageRenderWindowInteractor(320, 315, 250, 250);
            o->end();
          }
          o->end();
        }
        { Fl_Value_Slider* o = m_CSWidth = new Fl_Value_Slider(25, 275, 250, 20, "Sagittal");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(80);
          o->labelsize(10);
          o->step(1);
          o->callback((Fl_Callback*)cb_m_CSWidth);
          o->align(FL_ALIGN_BOTTOM_LEFT);
        }
        { Fl_Value_Slider* o = m_CSDepth = new Fl_Value_Slider(320, 275, 250, 20, "Axial");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(60);
          o->labelsize(10);
          o->step(1);
          o->callback((Fl_Callback*)cb_m_CSDepth);
          o->align(FL_ALIGN_BOTTOM_LEFT);
        }
        { Fl_Value_Slider* o = m_CSHeight = new Fl_Value_Slider(320, 565, 250, 20, "Coronal");
          o->type(5);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->selection_color(95);
          o->labelsize(10);
          o->step(1);
          o->callback((Fl_Callback*)cb_m_CSHeight);
          o->align(FL_ALIGN_BOTTOM_LEFT);
        }
        { Fl_Group* o = new Fl_Group(5, 315, 290, 250);
          o->box(FL_FLAT_BOX);
          o->color(22);
          { vtkFL3ViewRenderWindowInteractor* o = m_C3VOIViewRender = new vtkFL3ViewRenderWindowInteractor(5, 315, 290, 250);
            o->end();
          }
          o->end();
        }
        { Fl_Output* o = m_CSPosX = new Fl_Output(97, 572, 40, 15, "x");
          o->labelsize(10);
          o->textsize(10);
        }
        { Fl_Output* o = m_CSPosY = new Fl_Output(155, 572, 40, 15, "y");
          o->labelsize(10);
          o->textsize(10);
        }
        { Fl_Check_Button* o = m_CMoveVOISlice = new Fl_Check_Button(5, 570, 80, 20, "Move slice");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->labelsize(11);
        }
        { Fl_Group* o = new Fl_Group(350, 620, 185, 85, "Thresholding");
          o->box(FL_PLASTIC_UP_BOX);
          o->color(254);
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Value_Slider* o = m_CThreshInf = new Fl_Value_Slider(385, 635, 135, 15, "Inf");
            o->type(5);
            o->box(FL_FLAT_BOX);
            o->labelsize(11);
            o->maximum(255);
            o->step(1);
            o->callback((Fl_Callback*)cb_m_CThreshInf);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Value_Slider* o = m_CThreshSup = new Fl_Value_Slider(385, 660, 135, 15, "Sup");
            o->type(5);
            o->box(FL_FLAT_BOX);
            o->labelsize(11);
            o->maximum(255);
            o->step(1);
            o->callback((Fl_Callback*)cb_m_CThreshSup);
            o->align(FL_ALIGN_LEFT);
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
}

void US3DGui::Load() {
}

void US3DGui::SaveVRML() {
}

void US3DGui::SetBrightness() {
}

void US3DGui::SetSmoothing() {
}

void US3DGui::SetDecimate() {
}

void US3DGui::SurfaceRender() {
}

void US3DGui::RayRender() {
}

void US3DGui::SetOpacity() {
}

void US3DGui::SetControlRay() {
}

void US3DGui::SetControlRender() {
}

void US3DGui::SetFilteredSliceDepth() {
}

void US3DGui::SetFilteredSliceWidth() {
}

void US3DGui::SetFilteredSliceHeight() {
}

void US3DGui::SetRadius(float value) {
}

void US3DGui::SetStandardDeviation(float value) {
}

void US3DGui::SetVOIDepthUp() {
}

void US3DGui::SetVOIDepthDown() {
}

void US3DGui::ExtractVOI() {
}

void US3DGui::SetSegmentedSliceWidth() {
}

void US3DGui::SetSegmentedSliceDepth() {
}

void US3DGui::SetSegmentedSliceHeight() {
}

void US3DGui::SetThresholding() {
}

void US3DGui::Ruota() {
}

void US3DGui::SetShadingInterpolationMethod() {
}

void US3DGui::SetFeatureAngle() {
}

void US3DGui::SetVolumeResolution() {
}

void US3DGui::VolumeRender() {
}

void US3DGui::SaveVTK() {
}
